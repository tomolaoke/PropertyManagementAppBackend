# OpenAPI 3.0.3 specification for Property Management System (PMS)
# This file documents all REST endpoints and schemas for the backend.
#
# How to update:
# - Add new endpoints under `paths`.
# - Update or add schemas under `components.schemas`.
# - Use tags to group endpoints.
# - See README.md for more details.
#
openapi: 3.0.3
info:
  title: Property Management System API
  description: API for managing properties, leases, user authentication, and payments for landlords and tenants. Tested endpoints are marked as [TESTED].
  version: 1.0.2
  contact:
    name: PMS Support
    email: support@pms-bd.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:5000/api
    description: Local development server
  - url: https://pms-bd.onrender.com/api
    description: Production server
paths:
  /auth/register:
    post:
      summary: Register a new user [TESTED]
      tags: [Authentication]
      description: Creates a landlord or tenant account. Sends an email OTP for verification. Tested and working.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              name: John Doe
              email: john.doe@example.com
              password: password123
              role: landlord
              phone: +2341234567890
      responses:
        '201':
          description: User registered, email verification required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
              example:
                message: User registered. Verify your email.
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/verify-email:
    post:
      summary: Verify user email [TESTED]
      tags: [Authentication]
      description: Verifies email with OTP sent during registration. Tested and working.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, otp]
              properties:
                email: { type: string, format: email }
                otp: { type: string }
            example:
              email: john.doe@example.com
              otp: 123456
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
              example:
                message: Email verified
        '400':
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: Log in a user [TESTED]
      tags: [Authentication]
      description: Authenticates user and returns JWT token. Tested and working.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
            example:
              email: john.doe@example.com
              password: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user: { $ref: '#/components/schemas/UserResponse' }
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                user:
                  id: 1234567890abcdef
                  name: John Doe
                  email: john.doe@example.com
                  role: landlord
        '401':
          description: Invalid credentials or email not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/forgot-password:
    post:
      summary: Initiate password reset [TESTED]
      tags: [Authentication]
      description: Sends OTP to email for password reset. Tested and working.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
            example:
              email: john.doe@example.com
      responses:
        '200':
          description: OTP sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
              example:
                message: Reset OTP sent to email
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/reset-password:
    post:
      summary: Reset password [TESTED]
      tags: [Authentication]
      description: Resets password using OTP. Tested and working.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, otp, newPassword]
              properties:
                email: { type: string, format: email }
                otp: { type: string }
                newPassword: { type: string, minLength: 6 }
            example:
              email: john.doe@example.com
              otp: 123456
              newPassword: newpassword123
      responses:
        '200':
          description: Password reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
              example:
                message: Password reset successfully
        '400':
          description: Invalid OTP or input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/google:
    get:
      summary: Initiate Google OAuth
      tags: [Authentication]
      description: |
        Redirects to Google login for authentication. The `role` query parameter is required and must be either `tenant` or `landlord`.
        
        On successful authentication, users are redirected to:
        - `/landlord-welcome?token=...` for landlords
        - `/invited-tenant?token=...` for tenants
        
        On error, users are redirected to `/auth/error?message=...` on the frontend.
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [landlord, tenant]
          required: true
          description: User role for registration
      responses:
        '302':
          description: Redirect to Google login or frontend dashboard
        '400':
          description: Invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/google/callback:
    get:
      summary: Google OAuth callback
      tags: [Authentication]
      description: |
        Handles Google callback. On success, redirects to the role-specific dashboard on the frontend with a JWT token in the URL:
        - Landlord: `/landlord-welcome?token=...`
        - Tenant: `/invited-tenant?token=...`
        
        On error, redirects to `/auth/error?message=...` on the frontend.
      responses:
        '302':
          description: Redirect to frontend dashboard or error page
        '400':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /properties:
    post:
      summary: Create a new property [TESTED]
      tags: [Properties]
      description: Creates a property with JSON payload (URLs for utility_bill and photos). Tested and working.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyRequest'
            example:
              title: Cozy Apartment
              description: 2-bedroom apartment
              address: 123 Main St, Lagos
              utility_bill: https://res.cloudinary.com/demo/sample.pdf
              utility_bill_date: 2025-05-01
              photos:
                - https://res.cloudinary.com/demo/sample.jpg
                - https://res.cloudinary.com/demo/sample2.jpg
              rent: 500000
              lease_duration: 12
              type: apartment
      responses:
        '201':
          description: Property created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  property: { $ref: '#/components/schemas/Property' }
              example:
                message: Property created
                property:
                  id: 1234567890abcdef
                  title: Cozy Apartment
                  description: 2-bedroom apartment
                  address: 123 Main St, Lagos
                  utility_bill: https://res.cloudinary.com/demo/sample.pdf
                  utility_bill_date: 2025-05-01
                  photos:
                    - https://res.cloudinary.com/demo/sample.jpg
                    - https://res.cloudinary.com/demo/sample2.jpg
                  rent: 500000
                  lease_duration: 12
                  type: apartment
                  landlord_id: 1234567890abcdef
                  status: active
                  created_at: 2025-05-17T12:00:00Z
        '400':
          description: Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized (non-landlord)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List properties
      tags: [Properties]
      description: Returns properties (landlord sees own, tenant sees active). Untested but likely implemented.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /properties/{id}:
    get:
      summary: Get a single property [TESTED]
      tags: [Properties]
      description: Retrieves a property by ID. Tested with ID 6825c2b6a7e065578c68b82a.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Property ID
      responses:
        '200':
          description: Property details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a property
      tags: [Properties]
      description: Updates a property (landlord only). Untested but implemented in propertiesController.js.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Property ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyRequest'
            example:
              title: Updated Cozy Apartment
              photos:
                - https://res.cloudinary.com/demo/sample3.jpg
      responses:
        '200':
          description: Property updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  property: { $ref: '#/components/schemas/Property' }
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Soft delete a property
      tags: [Properties]
      description: Marks a property as deleted (landlord only). Untested but implemented.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Property ID
      responses:
        '200':
          description: Property deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
              example:
                message: Property deleted
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /leases:
    post:
      summary: Create a new lease [TESTED]
      tags: [Leases]
      description: Creates a lease between a property and tenant (landlord only). Tested and working.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [property_id, tenant_id, start_date, end_date, rent_amount, payment_terms]
              properties:
                property_id: { type: string }
                tenant_id: { type: string }
                start_date: { type: string, format: date }
                end_date: { type: string, format: date }
                rent_amount: { type: number }
                payment_terms: { type: string, enum: [Monthly, Quarterly, Yearly] }
            example:
              property_id: 1234567890abcdef
              tenant_id: 0987654321fedcba
              start_date: 2025-05-01
              end_date: 2026-05-01
              rent_amount: 500000
              payment_terms: Monthly
      responses:
        '201':
          description: Lease created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  lease: { $ref: '#/components/schemas/Lease' }
              example:
                message: Lease created
                lease:
                  id: 1234567890abcdef
                  property_id: 1234567890abcdef
                  tenant_id: 0987654321fedcba
                  start_date: 2025-05-01
                  end_date: 2026-05-01
                  rent_amount: 500000
                  payment_terms: Monthly
                  status: active
                  created_at: 2025-05-17T12:00:00Z
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List leases [TESTED]
      tags: [Leases]
      description: Returns leases (landlord sees own, tenant sees theirs). Tested and working.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of leases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lease'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /leases/{id}:
    get:
      summary: Get a single lease [TESTED]
      tags: [Leases]
      description: Retrieves a lease by ID. Tested with ID 6835edfa996e720d12ea30d0 on 2025-06-01.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Lease ID
      responses:
        '200':
          description: Lease details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lease'
        '404':
          description: Lease not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /invitations:
    post:
      summary: Send invitation to tenant [TESTED]
      tags: [Invitations]
      description: Sends an invitation to a tenant for a property (landlord only). Tested and working on 2025-06-01.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tenant_email, property_id]
              properties:
                tenant_email: { type: string, format: email }
                property_id: { type: string }
                lease_id: { type: string }
            example:
              tenant_email: tommola.oke@gmail.com
              property_id: 6835aa6ceea8975c7a3a12fc
      responses:
        '201':
          description: Invitation sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  invitation: { $ref: '#/components/schemas/Invitation' }
              example:
                message: Invitation sent
                invitation:
                  _id: 683c99083adfab578eaaf039
                  landlord_id: 6835937102014bbac617695a
                  tenant_email: tommola.oke@gmail.com
                  property_id: 6835aa6ceea8975c7a3a12fc
                  status: pending
                  created_at: 2025-06-01T18:16:40.573Z
        '400':
          description: Invalid input or invalid lease
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized or property not owned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List invitations [TESTED]
      tags: [Invitations]
      description: Returns invitations (landlord sees sent, tenant sees received). Tested and working on 2025-06-01.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of invitations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invitation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /invitations/{id}/accept:
    post:
      summary: Accept an invitation [TESTED]
      tags: [Invitations]
      description: Tenant accepts an invitation, updating status and assigning tenant to lease if provided. Tested with ID 683c99083adfab578eaaf039 on 2025-06-01. No request body required.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Invitation ID
      responses:
        '200':
          description: Invitation accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  invitation: { $ref: '#/components/schemas/Invitation' }
              example:
                message: Invitation accepted
                invitation:
                  _id: 683c99083adfab578eaaf039
                  landlord_id: 6835937102014bbac617695a
                  tenant_email: tommola.oke@gmail.com
                  property_id: 6835aa6ceea8975c7a3a12fc
                  status: accepted
                  created_at: 2025-06-01T18:16:40.573Z
        '400':
          description: Invalid invitation or already processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized or not tenant's invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /invitations/{id}/decline:
    post:
      summary: Decline an invitation [TESTED]
      tags: [Invitations]
      description: Tenant declines an invitation, updating status. Tested and working on 2025-06-01.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Invitation ID
      responses:
        '200':
          description: Invitation declined
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  invitation: { $ref: '#/components/schemas/Invitation' }
              example:
                message: Invitation declined
                invitation:
                  _id: 1234567890abcdef
                  landlord_id: 6835937102014bbac617695a
                  tenant_email: tommola.oke@gmail.com
                  property_id: 6835aa6ceea8975c7a3a12fc
                  status: declined
                  created_at: 2025-06-01T18:16:40.573Z
        '400':
          description: Invalid invitation or already processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized or not tenant's invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile:
    put:
      summary: Update user profile [TESTED]
      tags: [Profile]
      description: Updates user details (name, phone, etc.). Tested and working.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                phone: { type: string }
            example:
              name: John Updated
              phone: +2349876543210
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  user: { $ref: '#/components/schemas/UserResponse' }
              example:
                message: Profile updated
                user:
                  id: 1234567890abcdef
                  name: John Updated
                  email: john.doe@example.com
                  role: landlord
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /requests:
    post:
      summary: Create a property request [TESTED]
      tags: [Requests]
      description: Tenant requests to lease a property. Tested and working.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [property_id]
              properties:
                property_id: { type: string }
            example:
              property_id: 1234567890abcdef
      responses:
        '201':
          description: Request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  request: { type: object }
              example:
                message: Request created
                request:
                  id: 1234567890abcdef
                  property_id: 1234567890abcdef
                  tenant_id: 0987654321fedcba
                  status: pending
                  created_at: 2025-05-17T12:00:00Z
        '400':
          description: Invalid property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized (non-tenant)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payments/subaccount:
    post:
      summary: Create payment subaccount
      tags: [Payments]
      description: Sets up a Paystack subaccount for landlord. Untested, awaiting Paystack API key.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [businessName, bankCode, accountNumber]
              properties:
                businessName: { type: string }
                bankCode: { type: string }
                accountNumber: { type: string }
            example:
              businessName: Landlord Business
              bankCode: 044
              accountNumber: 0690000032
      responses:
        '201':
          description: Subaccount created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  subaccountId: { type: string }
              example:
                message: Subaccount created successfully
                subaccountId: SUB_1234567890
        '400':
          description: Invalid input or Paystack error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized (non-landlord)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payments/initialize:
    post:
      summary: Initialize a payment
      tags: [Payments]
      description: Initiates a rent payment via Paystack. Untested, awaiting Paystack API key.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount, lease_id]
              properties:
                amount: { type: number }
                lease_id: { type: string }
            example:
              amount: 650000
              lease_id: 6835edfa996e720d12ea30d0
      responses:
        '200':
          description: Payment initialized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  paymentUrl: { type: string }
                  reference: { type: string }
              example:
                message: Payment initialized
                paymentUrl: https://paystack.com/pay/abc123
                reference: trf_1234567890
        '400':
          description: Invalid input or Paystack error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized (non-tenant)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payments/verify/{reference}:
    get:
      summary: Verify a payment
      tags: [Payments]
      description: Verifies a Paystack payment by reference. Untested, awaiting Paystack API key.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: reference
          required: true
          schema:
            type: string
          description: Payment reference
      responses:
        '200':
          description: Payment verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  payment: { type: object }
              example:
                message: Payment verified successfully
                payment:
                  id: pay_1234567890
                  amount: 650000
                  lease_id: 6835edfa996e720d12ea30d0
                  status: success
                  created_at: 2025-06-01T12:00:00Z
        '400':
          description: Invalid reference or payment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /maintenance:
    post:
      summary: Submit a maintenance request [TESTED]
      tags: [Maintenance]
      description: Allows tenants to submit maintenance requests for properties. Tested with ID 683c984e3adfab578eaaf030 on 2025-06-01.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceRequest'
            example:
              property_id: 6835aa6ceea8975c7a3a12fc
              description: Fix broken window
      responses:
        '201':
          description: Maintenance request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  maintenanceRequest: { $ref: '#/components/schemas/MaintenanceRequest' }
              example:
                message: Maintenance request created
                maintenanceRequest:
                  _id: 683c984e3adfab578eaaf030
                  property_id: 6835aa6ceea8975c7a3a12fc
                  tenant_id: 6835ae50eea8975c7a3a130d
                  description: Fix broken window
                  status: pending
                  created_at: 2025-06-01T18:13:34.404Z
        '400':
          description: Invalid input or no active lease
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized (non-tenant)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List maintenance requests [TESTED]
      tags: [Maintenance]
      description: Returns maintenance requests (landlord sees all for their properties, tenant sees own). Tested on 2025-06-01.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of maintenance requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  maintenanceRequests: 
                    type: array
                    items: 
                      $ref: '#/components/schemas/MaintenanceRequest'
              example:
                message: Maintenance requests retrieved
                maintenanceRequests:
                  - _id: 683c984e3adfab578eaaf030
                    property_id:
                      _id: 6835aa6ceea8975c7a3a12fc
                      title: Updated Cozy Apartment
                      address: 12 Marina Street, Lagos
                    tenant_id: 6835ae50eea8975c7a3a130d
                    description: Fix broken window
                    status: pending
                    created_at: 2025-06-01T18:13:34.404Z
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    RegisterRequest:
      type: object
      required: [name, email, password, role]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        role: { type: string, enum: [landlord, tenant] }
        phone: { type: string }
    UserResponse:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [landlord, tenant] }
    PropertyRequest:
      type: object
      required: [title, description, address, utility_bill, utility_bill_date, photos, rent, lease_duration, type]
      properties:
        title: { type: string }
        description: { type: string }
        address: { type: string }
        utility_bill: { type: string, format: uri, description: 'URL to utility bill' }
        utility_bill_date: { type: string, format: date }
        photos: { type: array, items: { type: string, format: uri }, minItems: 1 }
        rent: { type: number }
        lease_duration: { type: number }
        type: { type: string, enum: [apartment, house, commercial] }
    Property:
      type: object
      properties:
        id: { type: string }
        landlord_id: { type: string }
        title: { type: string }
        description: { type: string }
        address: { type: string }
        utility_bill: { type: string, format: uri }
        utility_bill_date: { type: string, format: date }
        photos: { type: array, items: { type: string, format: uri } }
        rent: { type: number }
        lease_duration: { type: number }
        type: { type: string, enum: [apartment, house, commercial] }
        status: { type: string, enum: [active, archived, deleted] }
        created_at: { type: string, format: date-time }
    Lease:
      type: object
      properties:
        id: { type: string }
        property_id: 
          type: object
          properties:
            _id: { type: string }
            title: { type: string }
            address: { type: string }
        tenant_id: 
          type: object
          properties:
            _id: { type: string }
            name: { type: string }
            email: { type: string, format: email }
        start_date: { type: string, format: date-time }
        end_date: { type: string, format: date-time }
        rent_amount: { type: number }
        payment_terms: { type: string, enum: [Monthly, Quarterly, Yearly] }
        status: { type: string, enum: [active, expired, terminated, upcoming] }
        created_at: { type: string, format: date-time }
    Invitation:
      type: object
      properties:
        _id: { type: string }
        landlord_id: { type: string }
        tenant_email: { type: string, format: email }
        property_id: 
          type: object
          properties:
            _id: { type: string }
            title: { type: string }
            address: { type: string }
        lease_id: { type: string }
        status: { type: string, enum: [pending, accepted, declined] }
        created_at: { type: string, format: date-time }
    Error:
      type: object
      properties:
        message: { type: string }
      example:
        message: Invalid input
    MaintenanceRequest:
      type: object
      required: [property_id, description]
      properties:
        _id: { type: string }
        property_id: 
          type: object
          properties:
            _id: { type: string }
            title: { type: string }
            address: { type: string }
        tenant_id: { type: string }
        description: { type: string }
        status: { type: string, enum: [pending, in_progress, completed] }
        created_at: { type: string, format: date-time }
    PaymentSubaccount:
      type: object
      properties:
        id: { type: string }
        property_id: { type: string }
        account_name: { type: string }
        bank_name: { type: string }
        account_number: { type: string }
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT